<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>马拉车理解+板子</title>
    <link href="/2020/10/23/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%90%86%E8%A7%A3+%E6%9D%BF%E5%AD%90%20/"/>
    <url>/2020/10/23/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%90%86%E8%A7%A3+%E6%9D%BF%E5%AD%90%20/</url>
    
    <content type="html"><![CDATA[<p>马拉车就是在字符串中间加上’#’使得无论字符串长度为奇或偶都为偶，而且如果mx&lt;i,则为第一种情况，<br>先确定mx以内的回文串，马拉车就快在这（不用从头向两边寻找），再向两边延伸，注意的是<code>len[i]=min(mx-i,len[2*po-i]);</code>这个2*po-i是如何得来的，设i关于po的对称点为j那么len[j]=len[i]可以肯定，(i+j)/2=po可以推出j=2*po-i.<br>另一种情况是i&gt;mx就需要直接从i向两边暴力求了<br><a href="https://www.luogu.com.cn/problem/P3805">洛谷P3805</a></p><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a));</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long int</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">11000000</span>;<span class="hljs-keyword">char</span> str[maxn+<span class="hljs-number">10</span>];<span class="hljs-keyword">char</span> temp[maxn*<span class="hljs-number">2</span>+<span class="hljs-number">10</span>];<span class="hljs-keyword">int</span> len[maxn*<span class="hljs-number">2</span>+<span class="hljs-number">10</span>];<span class="hljs-keyword">int</span> max1=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len1)</span></span><span class="hljs-function"></span>&#123;    temp[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;@&#x27;</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*len1;i+=<span class="hljs-number">2</span>)    &#123;        temp[i]=<span class="hljs-string">&#x27;#&#x27;</span>;        temp[i+<span class="hljs-number">1</span>]=str[i/<span class="hljs-number">2</span>];    &#125;    temp[<span class="hljs-number">2</span>*len1+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;    temp[<span class="hljs-number">2</span>*len1+<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;$&#x27;</span>;    temp[<span class="hljs-number">2</span>*len1+<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">manacher</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nlen)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> mx=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>,po=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=nlen;++i)    &#123;        <span class="hljs-keyword">if</span>(mx&gt;i)            len[i]=<span class="hljs-built_in">min</span>(mx-i,len[<span class="hljs-number">2</span>*po-i]);<span class="hljs-comment">//(i+j)/2==po推出j=2*po-i，且右侧不得大于mx</span>        <span class="hljs-keyword">else</span>            len[i]=<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(temp[i-len[i]]==temp[i+len[i]])            len[i]++;        <span class="hljs-keyword">if</span>(i+len[i]&gt;mx)        &#123;            po=i;            mx=i+len[i];        &#125;        len[i]--;        <span class="hljs-keyword">if</span>(len[i]&gt;max1)            max1=len[i];    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> len1,nlen;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);    len1=<span class="hljs-built_in">strlen</span>(str);    init(len1);    nlen=<span class="hljs-built_in">strlen</span>(temp);    manacher(nlen);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max1);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>欧拉筛板子</title>
    <link href="/2020/10/21/%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%9D%BF%E5%AD%90/"/>
    <url>/2020/10/21/%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%9D%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3383">洛谷P3383 【模板】线性筛素数</a><br>欧拉筛板子</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a));</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long int</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-keyword">bool</span> prime[<span class="hljs-number">100000010</span>];<span class="hljs-keyword">int</span> num[<span class="hljs-number">6000010</span>],cnt=<span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">olprime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><span class="hljs-comment">//欧拉筛法</span></span><span class="hljs-function"></span>&#123;    mem(prime,<span class="hljs-number">1</span>);    prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)    &#123;        <span class="hljs-keyword">if</span>(prime[i])<span class="hljs-comment">//没筛掉</span>            num[++cnt]=i;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=cnt&amp;&amp;i*num[j]&lt;=n;++j)<span class="hljs-comment">//从最小质数2开始寻找最小质因数</span>        &#123;            prime[i*num[j]]=<span class="hljs-number">0</span>;            <span class="hljs-keyword">if</span>(i%num[j]==<span class="hljs-number">0</span>)<span class="hljs-comment">//寻找到最小质因数，为了防止重复筛，break出来</span>                <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> n,q;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);    olprime(n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;q;++i)    &#123;        <span class="hljs-keyword">int</span> a;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num[a]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>快速幂板子</title>
    <link href="/2020/10/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%9D%BF%E5%AD%90/"/>
    <url>/2020/10/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%9D%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1226">题目链接洛谷P1226</a></p><pre><code class="hljs csharp"><span class="hljs-meta">#include&lt;bits/stdc++.h&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a));</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-function">ll <span class="hljs-title">quick</span>(<span class="hljs-params">ll a,ll b,ll c</span>)<span class="hljs-comment">//每步都要mod  c</span></span><span class="hljs-function"></span>&#123;    ll ans=<span class="hljs-number">1</span>,<span class="hljs-keyword">base</span>=a%c;<span class="hljs-comment">//ans为答案，base为a^(2^n)</span>    <span class="hljs-keyword">while</span>(b)<span class="hljs-comment">//比如为11则他的二进制位1101，如果没用完就可以继续</span>    &#123;        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)<span class="hljs-comment">//位运算，如果b的最后一位是1则答案*ans</span>            ans=ans*<span class="hljs-keyword">base</span>%c;        <span class="hljs-keyword">base</span>=<span class="hljs-keyword">base</span>*<span class="hljs-keyword">base</span>%c;<span class="hljs-comment">//base自乘</span>        b&gt;&gt;=<span class="hljs-number">1</span>;<span class="hljs-comment">//位运算，b向右移一位，如1101变成110把最右边的1移除了</span>    &#125;    ans=ans%c;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    ll a,b,c;    scanf(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;c);    ll ans;    ans=quick(a,b,c);    printf(<span class="hljs-string">&quot;%lld^%lld mod %lld=%lld\n&quot;</span>,a,b,c,ans);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集+克鲁斯卡尔+最小生成树板子</title>
    <link href="/2020/10/20/%E5%B9%B6%E6%9F%A5%E9%9B%86+%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94+%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%9D%BF%E5%AD%90/"/>
    <url>/2020/10/20/%E5%B9%B6%E6%9F%A5%E9%9B%86+%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94+%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E6%9D%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3366">洛谷P3366 【模板】最小生成树</a></p><pre><code class="hljs cpp">```<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a));</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long int</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-keyword">int</span> pre[<span class="hljs-number">5005</span>];<span class="hljs-keyword">int</span> n,m;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node1</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> x,y,w;&#125;node[<span class="hljs-number">200020</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)        pre[i]=i;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node1 x,node1 y)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> x.w&lt;y.w;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> son)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> deson,dad;    deson=son;   <span class="hljs-keyword">while</span>(son!=pre[son])        son=pre[son];    <span class="hljs-keyword">while</span>(deson!=pre[deson])    &#123;        dad=pre[deson];        pre[deson]=son;        deson=dad;    &#125;    <span class="hljs-keyword">return</span> son;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    sort(node,node+m,cmp);    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>,js=<span class="hljs-number">0</span>,dad1,dad2;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)    &#123;        dad1=Find(node[i].x);        dad2=Find(node[i].y);        <span class="hljs-keyword">if</span>(dad1!=dad2)        &#123;            sum+=node[i].w;            pre[dad1]=dad2;            ++js;            <span class="hljs-keyword">if</span>(js==n<span class="hljs-number">-1</span>)                <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span>(js==n<span class="hljs-number">-1</span>)        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);    <span class="hljs-keyword">else</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;orz\n&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);    init();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)    &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;node[i].x,&amp;node[i].y,&amp;node[i].w);    &#125;    kruskal();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客吧</title>
    <link href="/2020/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2020/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>第一篇博客，没想好写点什么，随便写写吧。<br>    大一整年都在摸鱼，摸了一年的鱼，其实在大一下就该好好开始训练学习了。可我还在玩，所以比别人差了许多。现在大二开学了，可能是该放弃一些东西的时候了吧，像游戏什么的，该减少一些了，其实我现在也玩的不多0.0，平时白天都上一天课，没课就来实验室，每天都在忙不知道忙的什么，就离谱。<br>    大二我不能像大一那么松懈，该学习算法学习算法，而且英语、线代等等也不能落下，感觉时间过得挺快的0.0.<br>    其实也就没什么好说的，就说这些吧，我去学会线代11111.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/12/hello-world/"/>
    <url>/2020/10/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
